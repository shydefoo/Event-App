openapi: 3.0.0
info:
  title: Entry Task
  version: 1.0.0
servers:
  - url: http://localhost:8000/api
    description: API Endpoint for entry-tasks to do basic api calls
paths:
  /get_jwt_token/:
    post:
      summary: Returns jwt token upon successful validation
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema: 
              $ref: '#/components/schemas/get_jwt_token'
      responses:
        '200':    # status code
          description: ok
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/get_jwt_token_response'
  /join_event/:
    post:
      summary: Join an event
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/post_user_event_id'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reply_response'
  /leave_event/:
    post:
      summary: Leave an event
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/post_user_event_id'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reply_response'
  /like_event/:
    post:
      summary: Like an event
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/post_user_event_id'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reply_response'
  /dislike_event/:
    post:
      summary: Dislike an event
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/post_user_event_id'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reply_response'
                
  /comment_event/:
    post:
      summary: Comment on an event
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content: 
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/comment_on_event'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reply_response'
  /search_event/:
    post:
      summary: Search for events via category, title, location, or date in %d-%m-%Y format
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                search_text:
                  type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_events_response'
  /create_user/:
    post:
      summary: Create new user
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/username_password'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/reply_response'
        '202':
          description: User account already exists
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/reply_response'
                
  /create_category/:
    post:
      summary: Create new category
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                category:
                  type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/reply_response'
        '202':
          description: Category exists
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/reply_response'
      
  
  /get_events/:
    get:
      summary: Returns all events
      security:
        - ApiKeyAuth: [] 
      responses:
        '200':
          description: List of all events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get_events_response'
  
  /get_event_photos/{event_id}:
    get:
      summary: Returns photos associated with event
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: string
      responses:
        '200': 
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/photos_response"
  
  /get_event_comments/{event_id}:
    get:
      summary: Returns comments associated with event
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comments_response'
        '404':
          description: Event does not exist
  
  /get_event_participants/{event_id}:
    get:
      summary: Returns comments associated with event
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/participants_like_response'
        '404':
          description: Event does not exist    
  
  /get_event_likes/{event_id}:
    get:
      summary: Returns likes associated with event
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/participants_like_response'
        '404':
          description: Event does not exist    
  
  

  
  
    
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: authorization
  schemas:
    get_jwt_token:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    
    get_jwt_token_response:
      type: object
      properties:
        token:
          type: string
    
    get_events_response:
      type: object
      properties:
        event_list:
          $ref: '#/components/schemas/event_list'
    
    event_list:
      type: array
      items: 
        oneOf:
          - $ref: "#/components/schemas/event"
      properties:
        schema:
          $ref: "#/components/schemas/event"
          
    event:
      type: object
      properties:
        category:
          $ref: '#/components/schemas/list_of_strings'
        datetime_of_event:
          type: string
        get_absolute_url:
          type: string
        id:
          type: string
        likes:
          $ref: '#/components/schemas/list_of_strings'
        location:
          type: string
        participants: 
          $ref: '#/components/schemas/list_of_strings'
        title:
          type: string
          
    list_of_strings:
      type: array
      items:
        type: string
        
    photos_response:
      type: object
      properties:
        image_urls:
          $ref: '#/components/schemas/list_of_strings'
    
    comments_response:
      type: object
      properties:
        comments:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/comment'
          properties:
            schema:
              $ref: '#/components/schemas/comment'
    comment:
      type: object
      properties:
        comment:
          type: string
        datetime:
          type: string
        id:
          type: string
        username:
          type: string
        
    participants_like_response:
      type: object
      properties:
        users:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/users'
          properties:
            schema: 
              $ref: '#/components/schemas/users'
    users:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
    
    post_user_event_id:
      type: object
      properties:
        event_id:
          type: string
        user_id:
          type: string
          
    reply_response:
      type: object
      properties:
        reply:
          type: string
    
    comment_on_event:
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/post_user_event_id'
        comment:
          type: string
    
    username_password:
      type: object
      properties:
        username: 
          type: string
        password:
          type: string
        is_staff:
          type: integer
              
            
                
            
          